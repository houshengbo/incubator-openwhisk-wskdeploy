/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'com.github.blindpirate.gogradle' version '0.8.1'
}

golang {
    packagePath = 'github.com/apache/incubator-openwhisk-wskdeploy' as String
}

dependencies {
    golang {
        build(['name':'github.com/cloudfoundry/jibber_jabber', 'version':'bcc4c8345a21301bf47c032ff42dd1aae2fe3027', 'transitive':false])
        build(['name':'github.com/fatih/color', 'version':'5df930a27be2502f99b292b7cc09ebad4d0891f4', 'transitive':false])
        build(['name':'github.com/fsnotify/fsnotify', 'version':'fd9ec7deca8bf46ecd2a795baaacf2b3a9be1197', 'transitive':false])
        build(['name':'github.com/google/go-querystring/query', 'version':'9235644dd9e52eeae6fa48efd539fdc351a0af53', 'transitive':false])
        build(['name':'github.com/hashicorp/hcl/.../', 'version':'973f376f0e7cf09c96e445b44712416c0cb22ec4', 'transitive':false])
        build(['name':'github.com/hokaccha/go-prettyjson', 'version':'f75235bd99dad4e98ff360db8372d5c0ef1d054a', 'transitive':false])
        build(['name':'github.com/inconshreveable/mousetrap', 'version':'76626ae9c91c4f2a10f34cad8ce83ea42c93bb75', 'transitive':false])
        build(['name':'github.com/magiconair/properties', 'version':'0723e352fa358f9322c938cc2dadda874e9151a9', 'transitive':false])
        build(['name':'github.com/mattn/go-colorable', 'version':'d228849504861217f796da67fae4f6e347643f15', 'transitive':false])
        build(['name':'github.com/mattn/go-isatty', 'version':'6ca4dbf54d38eea1a992b3c722a76a5d1c4cb25c', 'transitive':false])
        build(['name':'github.com/mitchellh/mapstructure', 'version':'f3009df150dadf309fdee4a54ed65c124afad715', 'transitive':false])
        build(['name':'github.com/nicksnyder/go-i18n/i18n/...', 'version':'991e81cc94f6c54209edb3192cb98e3995ad71c1', 'transitive':false])
        build(['name':'github.com/pelletier/go-buffruneio', 'version':'df1e16fde7fc330a0ca68167c23bf7ed6ac31d6d', 'transitive':false])
        build(['name':'github.com/pelletier/go-toml', 'version':'45932ad32dfdd20826f5671da37a5f3ce9f26a8d', 'transitive':false])
        build(['name':'github.com/spf13/afero/...', 'version':'06b7e5f50606ecd49148a01a6008942d9b669217', 'transitive':false])
        build(['name':'github.com/spf13/cast', 'version':'2580bc98dc0e62908119e4737030cc2fdfc45e4c', 'transitive':false])
        build(['name':'github.com/spf13/jwalterweatherman', 'version':'33c24e77fb80341fe7130ee7c594256ff08ccc46', 'transitive':false])
        build(['name':'github.com/spf13/viper', 'version':'651d9d916abc3c3d6a91a12549495caba5edffd2', 'transitive':false])
        build(['name':'github.com/spf13/cobra', 'version':'6e91dded25d73176bf7f60b40dd7aa1f0bf9be8d', 'transitive':false])
        build(['name':'github.com/spf13/pflag', 'version':'5ccb023bc27df288a957c5e994cd44fd19619465', 'transitive':false])
        build(['name':'golang.org/x/sys/unix', 'version':'9a2e24c3733eddc63871eda99f253e2db29bd3b9', 'transitive':false])
        build(['name':'gopkg.in/yaml.v2', 'version':'eb3733d160e74a9c7e442f435eb3bea458e1d19f', 'transitive':false])
        build(['name':'golang.org/x/text/transform', 'version':'a8b38433e35b65ba247bb267317037dee1b70cea', 'transitive':false])
        build(['name':'golang.org/x/text/unicode/norm', 'version':'a8b38433e35b65ba247bb267317037dee1b70cea', 'transitive':false])
        build(['name':'github.com/palantir/stacktrace', 'version':'78658fd2d1772b755720ed8c44367d11ee5380d6', 'transitive':false])
        build(['name':'github.com/apache/incubator-openwhisk-client-go/whisk','version':'cef179c81f07f86413c720623995c17bd1bddd7d','transitive':false])

        test name:'github.com/stretchr/testify', version:'b91bfb9ebec76498946beb6af7c0230c7cc7ba6c', transitive:false //, tag: 'v1.2.0'
    }
}

ext.dockerImageName = "wskdeploy"
ext.dockerContainerName = "wskdeploy"
ext.dockerBuildArgs = getDockerBuildArgs()
apply from: 'gradle/docker.gradle'

task removeBinary(type: Delete) {
    delete "${projectDir}/bin/wskdeploy"
    delete "${projectDir}/bin/mac"
    delete "${projectDir}/bin/linux"
    delete "${projectDir}/bin/windows"
}

task distBinary(dependsOn: [removeBinary, distDocker]) {
    doLast {
        run(dockerBinary + ["rm", "-f", dockerContainerName], true)
        run(dockerBinary + ["run", "--name", dockerContainerName, dockerTaggedImageName])

        // Copy all Go binaries from Docker into openwhisk/bin folder
        run(dockerBinary + ["cp", dockerContainerName +
                ":/src/github.com/apache/incubator-openwhisk-wskdeploy/build/.", "${projectDir}/bin"])

        run(dockerBinary + ["rm", "-f", dockerContainerName])
    }
}

task dumpOSInfo {
    doLast {
        println "os.name = "+getOsName()
        println "os.arch = "+getOsArch()
        println "go.name = "+mapOsNameToGoName(getOsName())
        println "go.arch = "+mapOsArchToGoArch(getOsArch())
    }
}

task copyWSKDEPLOYShortcut(type: Copy, dependsOn: [distBinary, dumpOSInfo]) {
    String go_osname     = mapOsNameToGoName(getOsName())
    String go_osarch     = mapOsArchToGoArch(getOsArch())
    String from_path_wsk = "${projectDir}/bin/${go_osname}/${go_osarch}/wskdeploy"
    String to_path_dir   = "${projectDir}/bin"

    from from_path_wsk
    into to_path_dir
}

pushImage.finalizedBy copyWSKDEPLOYShortcut

// Returns the Go CLI docker build args
def getDockerBuildArgs() {
    String local_os = mapOsNameToGoName(getOsName())
    String local_arch = mapOsArchToGoArch(getOsArch())
    def res = []

    if(!project.hasProperty('crossCompileWSKDEPLOY') || project.crossCompileWSKDEPLOY == "false") {
        res = ["WSKDEPLOY_OS=${local_os}", "WSKDEPLOY_ARCH=${local_arch}"]
    } else {
        res = ["WSKDEPLOY_OS=mac linux windows", "WSKDEPLOY_ARCH=386 amd64"]
    }

    return res
}

def run(cmd, ignoreError = false) {
    println("Executing '${cmd.join(" ")}'")
    def proc = cmd.execute()
    proc.waitFor()
    if(!ignoreError && proc.exitValue() != 0) {
        println("Command '${cmd.join(" ")}' failed with exitCode ${proc.exitValue()}")
    }
}

def getOsName() {
    return System.properties['os.name']
}

def getOsArch() {
    return System.properties['os.arch']
}

def mapOsNameToGoName(String osname) {
    String osname_l = osname.toLowerCase()
    if (osname_l.contains("nux") || osname.contains("nix")) return "linux"
    if (osname_l.contains("mac")) return "mac"
    if (osname_l.contains("windows")) return "windows"
    return osname_l
}

def mapOsArchToGoArch(String osarch) {
    String osarch_l = osarch.toLowerCase()
    if (osarch_l.contains("x86_64") || osarch_l == "amd64") return "amd64"
    if (osarch_l.contains("i386") || osarch_l.contains("x86_32")) return "386"
    return osarch_l
}
